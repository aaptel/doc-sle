<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xml:id="cha-registry-installation" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Configuring Image Storage</title>
 <para>
  Before creating custom images, decide where you want to store the images. The
  easiest solution is to push these images to the
  <link xlink:href="https://hub.docker.com">&dhub;</link>. Keep in mind that by
  default, all images pushed to the &dhub; are public.
 </para>
 <para>
  There are the following options for restricting access to custom &docker;
  images:
 </para>
 <itemizedlist>
  <listitem>
   <para>
<!-- Are we really advertising the services of some unaffiliated third
    party? - sknorr, 2017-12-07 -->
    Get a subscription on the &dhub; that makes it possible to create private
    repositories.
   </para>
  </listitem>
  <listitem>
   <para>
    Run an on-site the the &dreg;, where you can store all the &docker; images
    used by your organization or company, combined with Portus to secure the
    registry.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  This chapter describes the second option: how to set up an on-site the &dreg;
  and how to combine it with Portus.
 </para>
 <sect1 xml:id="sec-docker-registry-definition">
  <title>What is the &dreg;?</title>

  <para>
   The &dreg; is an open-source platform for storing and retrieving of &docker;
   images. By running a local instance of the &dreg; it is possible to
   completely avoid usage of the &dhub;.
  </para>

  <para>
   The &dreg; is also used by the &dhub;. From the user point of view, the
   &dhub; consists as minimum of the following components:
  </para>

  <variablelist>
   <varlistentry>
    <term>The user interface (UI)</term>
    <listitem>
     <para>
      The part that is accessed by users using a browser. The UI provides an
      easy way to browse the contents of the &dhub;, either manually or using a
      search feature. It can be used the create organizations by different
      users.
     </para>
     <para>
      It is a closed-source component.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The authentication component</term>
    <listitem>
     <para>
      This component is used to protect the images stored in the &dhub;. It
      validates all push, pull, and search requests.
     </para>
     <para>
      It is a closed-source component.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The storage back-end</term>
    <listitem>
     <para>
      A place where &docker; images are sent and downloaded from. It is
      provided by the &dreg;.
     </para>
     <para>
      It is an open-source component.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-docker-registry-installation">
  <title>Installing and Setting Up the &dreg;</title>

  <procedure>
   <step>
    <para>
     Install the <systemitem>docker-distribution-registry</systemitem> package.
     This package is in &suse; PackageHub. If you have not enabled PackageHub,
     run the following commands to enable it:
    </para>
<screen>&prompt.sudo;SUSEConnect --product PackageHub/15.1/x86_64
&prompt.sudo;zypper refresh
</screen>
    <para>
     Install then <systemitem>docker-distribution-registry</systemitem>:
    </para>
<screen>&prompt.sudo;zypper install docker-distribution-registry</screen>
   </step>
   <step>
    <para>
     To automatically start the &dreg; at boot time:
    </para>
<screen>&prompt.sudo;systemctl enable registry</screen>
   </step>
   <step>
    <para>
     Start the &dreg;:
    </para>
<screen>&prompt.sudo;systemctl start registry</screen>
   </step>
  </procedure>

  <para>
   The &dreg; configuration is defined in the
   <filename>/etc/registry/config.yml</filename> file.
  </para>

  <para>
   With the default configuration, the registry listens on ports
   <literal>5000</literal> and stores the &docker; images in
   <filename>/var/lib/docker-registry</filename>.
  </para>

  <note>
   <title>Incompatible Versions of the &deng; and the &dreg;</title>
   <para>
    The &dreg; 2.3 is not compatible with the &deng; versions older than 1.10,
    because v2 manifests were only introduced with the &deng; 1.10. As the
    &deng; and the &dreg; can be installed on different machines, the versions
    might be incompatible. If you experience communication errors between the
    &deng; and the &dreg;, update both to the latest versions.
   </para>
  </note>

  <para>
   For more details about the &dreg; and its configuration, see the official
   documentation at: <link xlink:href="https://docs.docker.com/registry/"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec-docker-registry-limitations">
  <title>Limitations</title>

  <para>
   The &dreg; has two major limitations.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     It lacks any form of authentication. That means everybody with access to
     the &dreg; can push and pull images to it. That also includes the
     possibility to overwrite existing images.
    </para>
   </listitem>
   <listitem>
    <para>
     There is no way to see which images have been pushed to the &dreg;. You
     need to manually take notes of what is being stored on it. There is also
     no search functionality. These limitations are resolved by installing
     Portus.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-docker-portus">
  <title>Portus</title>

  <para>
   Portus is an authentication service and user interface for the &dreg;. It is
   an open-source project created by &suse; to address limitations of local
   instances of &dreg;. By combining Portus and the &dreg;, it is possible to
   have a secure and enterprise ready on-premises version of the &dhub;.
  </para>

  <para>
   Portus is available for &productname; customers as a &docker; image from
   &suse; Container Registry. For example, to pull the <literal>2.4.0</literal>
   tag of the &productname; 12 image, run the following command:
  </para>

<screen>&prompt.user;docker pull registry.suse.com/sles12/portus:2.4.0</screen>

  <para>
   In addition to the official version of the Portus image from &suse;
   Container Registry, there is a community version that can be found on the
   &dhub;. However, as a &productname; customer, we strongly suggest you use
   the official Portus image. The Portus image for &productname; customers has
   the same code as the one from the community. Therefore, the setup
   instructions from <link xlink:href="http://port.us.org/docs/deploy.html"/>
   apply for both images.
  </para>
 </sect1>
</chapter>
